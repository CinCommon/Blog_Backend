<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="xyz.cincommon.mapper.UserInfoMapper" >
  <resultMap id="BaseResultMap" type="xyz.cincommon.model.UserInfo" >
    <id column="uid" property="uid" jdbcType="INTEGER" />
    <result column="user_name" property="userName" jdbcType="VARCHAR" />
    <result column="password" property="password" jdbcType="VARCHAR" />
    <result column="avatar_url" property="avatarUrl" jdbcType="VARCHAR" />
    <result column="create_date" property="createDate" jdbcType="TIMESTAMP" />
    <result column="status" property="status" jdbcType="CHAR" />
    <result column="update_date" property="updateDate" jdbcType="TIMESTAMP" />
    <result column="update_user" property="updateUser" jdbcType="INTEGER" />
  </resultMap>
  <resultMap id="ResultMapWithBLOBs" type="xyz.cincommon.model.UserInfo" extends="BaseResultMap" >
    <result column="profile" property="profile" jdbcType="LONGVARCHAR" />
  </resultMap>

  <resultMap id="userMap" type="xyz.cincommon.model.User">
    <id property="uid" column="uid"/>
    <result property="username" column="user_name" />
    <result property="password" column="password" />
    <result property="profile" column="profile" />
    <result property="avatarUrl" column="avatar_url" />
    <result property="status" column="status" />
    <result property="createDate" column="create_date" />
    <result property="updateDate" column="update_date" />
    <result property="updateUser" column="update_user" />
    <collection property="roles" ofType="xyz.cincommon.model.Role" >
      <id property="rid" column="rid"/>
      <result property="name" column="rname" />
      <collection property="permissions" ofType="xyz.cincommon.model.Permission" >
        <id property="pid" column="pid"/>
        <result property="name" column="pname" />
        <result property="url" column="url" />
      </collection>
    </collection>
  </resultMap>
  <select id="findByUsername" parameterType="string" resultMap="userMap">
		SELECT u.*, r.rid, r.name as rname, p.pid, p.name as pname, p.url
		FROM user_info u
			INNER JOIN user_role ur on ur.uid = u.uid
			INNER JOIN role r ON r.rid = ur.rid
			INNER JOIN permission_role pr ON pr.rid = r.rid
			INNER JOIN permission p ON pr.pid = p.pid
		WHERE u.user_name = #{username}
	</select>
  <sql id="Base_Column_List" >
    uid, user_name, password, avatar_url, create_date, status, update_date, update_user
  </sql>
  <sql id="Blob_Column_List" >
    profile
  </sql>
  <select id="selectByPrimaryKey" resultMap="ResultMapWithBLOBs" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from user_info
    where uid = #{uid,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from user_info
    where uid = #{uid,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="xyz.cincommon.model.UserInfo" >
    insert into user_info (uid, user_name, password, 
      avatar_url, create_date, status, 
      update_date, update_user, profile
      )
    values (#{uid,jdbcType=INTEGER}, #{userName,jdbcType=VARCHAR}, #{password,jdbcType=VARCHAR}, 
      #{avatarUrl,jdbcType=VARCHAR}, #{createDate,jdbcType=TIMESTAMP}, #{status,jdbcType=CHAR}, 
      #{updateDate,jdbcType=TIMESTAMP}, #{updateUser,jdbcType=INTEGER}, #{profile,jdbcType=LONGVARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="xyz.cincommon.model.UserInfo" >
    insert into user_info
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="uid != null" >
        uid,
      </if>
      <if test="userName != null" >
        user_name,
      </if>
      <if test="password != null" >
        password,
      </if>
      <if test="avatarUrl != null" >
        avatar_url,
      </if>
      <if test="createDate != null" >
        create_date,
      </if>
      <if test="status != null" >
        status,
      </if>
      <if test="updateDate != null" >
        update_date,
      </if>
      <if test="updateUser != null" >
        update_user,
      </if>
      <if test="profile != null" >
        profile,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="uid != null" >
        #{uid,jdbcType=INTEGER},
      </if>
      <if test="userName != null" >
        #{userName,jdbcType=VARCHAR},
      </if>
      <if test="password != null" >
        #{password,jdbcType=VARCHAR},
      </if>
      <if test="avatarUrl != null" >
        #{avatarUrl,jdbcType=VARCHAR},
      </if>
      <if test="createDate != null" >
        #{createDate,jdbcType=TIMESTAMP},
      </if>
      <if test="status != null" >
        #{status,jdbcType=CHAR},
      </if>
      <if test="updateDate != null" >
        #{updateDate,jdbcType=TIMESTAMP},
      </if>
      <if test="updateUser != null" >
        #{updateUser,jdbcType=INTEGER},
      </if>
      <if test="profile != null" >
        #{profile,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="xyz.cincommon.model.UserInfo" >
    update user_info
    <set >
      <if test="userName != null" >
        user_name = #{userName,jdbcType=VARCHAR},
      </if>
      <if test="password != null" >
        password = #{password,jdbcType=VARCHAR},
      </if>
      <if test="avatarUrl != null" >
        avatar_url = #{avatarUrl,jdbcType=VARCHAR},
      </if>
      <if test="createDate != null" >
        create_date = #{createDate,jdbcType=TIMESTAMP},
      </if>
      <if test="status != null" >
        status = #{status,jdbcType=CHAR},
      </if>
      <if test="updateDate != null" >
        update_date = #{updateDate,jdbcType=TIMESTAMP},
      </if>
      <if test="updateUser != null" >
        update_user = #{updateUser,jdbcType=INTEGER},
      </if>
      <if test="profile != null" >
        profile = #{profile,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where uid = #{uid,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="xyz.cincommon.model.UserInfo" >
    update user_info
    set user_name = #{userName,jdbcType=VARCHAR},
      password = #{password,jdbcType=VARCHAR},
      avatar_url = #{avatarUrl,jdbcType=VARCHAR},
      create_date = #{createDate,jdbcType=TIMESTAMP},
      status = #{status,jdbcType=CHAR},
      update_date = #{updateDate,jdbcType=TIMESTAMP},
      update_user = #{updateUser,jdbcType=INTEGER},
      profile = #{profile,jdbcType=LONGVARCHAR}
    where uid = #{uid,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="xyz.cincommon.model.UserInfo" >
    update user_info
    set user_name = #{userName,jdbcType=VARCHAR},
      password = #{password,jdbcType=VARCHAR},
      avatar_url = #{avatarUrl,jdbcType=VARCHAR},
      create_date = #{createDate,jdbcType=TIMESTAMP},
      status = #{status,jdbcType=CHAR},
      update_date = #{updateDate,jdbcType=TIMESTAMP},
      update_user = #{updateUser,jdbcType=INTEGER}
    where uid = #{uid,jdbcType=INTEGER}
  </update>
  <cache/>
</mapper>